var Player = require("./Player.js");

var Game = function( server ){

	// Whether or not the game should be updating.
	var running = false;

	// Game Data
	var players  = [];
	
	var callbacks = {
		add: function(){},
		remove: function(){},
		update: function(){}
	};
	
	var getLeaderboard = function(){
		// Sort the players by radius...
		// then get an array containing only their id's.
		return sortByRadius(players).map(function(player){
			return player.id;
		});
	};

	// Sorts players by their radius from highest->lowest.
	var sortByRadius = function( unsorted ){
		var list = unsorted.slice(0); // Make a shallow copy of the list
		
		for(var i=0; i<list.length; i++){
			var p1 = list[i];
			for(var j=i+1; j<list.length; j++){
				var p2 = list[j];
				var a = p1.getRadius(), b = p2.getRadius();
				// If b > a, switch them.
				if(b>a){
					list[j] = list[i]; // [p2]=[p1]
					list[i] = p2; // [p1]=p2
					p1 = list[i]; // p1=[p1]
				}
			}
		}

		return list;
	};
	
	// Leave this here so you can discuss with sal.
	var testSortByRadius = function(){
		var test = function(r){return Player({radius: r});};
		var unsorted = [test(3),test(2),test(3),test(5),test(5)];
		var sorted = sortByRadius(unsorted);
		
		console.log(unsorted.map(function(e){return e.getRadius();}));
		console.log(sorted.map(function(e){return e.getRadius();}));
	};
	testSortByRadius();	

	/**
	* Define a callback for a certain game event (psuedo-event?)
	* this allows the GameServer to add logic after
	* each of these events, for instance the
	* GameServer will want to create a packet after each
	* 'add' event so it can inform clients.
	* @param {String} name - the name of the callback.
	* @param {function} callback - the callback itself.
	*/
	var on = function(name,callback){
		if(typeof(callbacks[name])==="function"){
			callbacks[name] = callback;
		}else{
			console.log("WARNING (Game::on) ["+name+"] is not a valid callback.");
		}
	};

	/**
	* Adds a player to the game.
	* @param {Player} ply - the player to add.
	*/
	var add = function( ply ){
		players.push(ply);
		callbacks.add(ply);
	};
	
	/**
	* Removes a player from the game.
	* @param {Player} ply - the player to remove.
	*/
	var remove = function( ply ){
		var i = players.indexOf( ply );
		if(i>-1){
			players.splice(i,1);
		}else{
			console.log("WARNING (Game::remove) Attempted to remove unindexed player " + ply.id);
		}
		callbacks.remove(ply);
	};

	/**
	* Updates the game logic.
	*/
	var tick = function(){
		players.forEach(function(e){
			// Players need to know about eachother to update
			e.update( players );
			callbacks.update(e);
		});
	};

	return {
		add: add,
		remove: remove,
		tick: tick,
		players: players,
		on: on,
		getLeaderboard: getLeaderboard
	};
};

module.exports = Game;
